id = Column(Integer, primary_key=True)
    address = Column(String)
    balance = Column(Integer)

# Mining Functionality
def proof_of_work(last_proof):
    """
    Simple Proof of Work Algorithm:
    - Find a number 'p' such that hash(pp') contains leading 4 zeroes, where p is the previous proof,
      and p' is the new proof.
    """
    proof = 0
    while not valid_proof(last_proof, proof):
        proof += 1
    return proof

def valid_proof(last_proof, proof):
    """
    Validates the Proof: Does hash(last_proof, proof) contain 4 leading zeroes?
    """
    guess = f'{last_proof}{proof}'.encode()
    guess_hash = hashlib.sha256(guess).hexdigest()
    return guess_hash[:4] == "0000"

# Wallet Integration
def create_wallet():
    """
    Create a new wallet with a unique address and initial balance of 0.
    """
    address = hashlib.sha256(str(time.time()).encode()).hexdigest()
    wallet = Wallet(address=address, balance=0)
    session.add(wallet)
    session.commit()
    return wallet.address

def get_wallet_balance(address):
    """
    Retrieve the balance of a given wallet address.
    """
    wallet = session.query(Wallet).filter_by(address=address).first()
    return wallet.balance

# Transaction Handling
def create_transaction(sender, recipient, amount):
    """
    Create a new transaction to be added to the next block.
    """
    # Validate the transaction
    sender_wallet = session.query(Wallet).filter_by(address=sender).first()
    if sender_wallet.balance < amount:
        return False

    # Update the balances
    sender_wallet.balance -= amount
    recipient_wallet = session.query(Wallet).filter_by(address=recipient).first()
    recipient_wallet.balance += amount

    session.commit()
    return True

# Blockchain Operations
def create_block(index, transactions, proof, previous_hash):
    """
    Create a new block and add it to the blockchain.
    """
    block = Block(
        index=index,
        timestamp=int(time.time()),
        transactions=str(transactions),
        proof=proof,
        previous_hash=previous_hash
    )
    session.add(block)
    session.commit()
    return block

def get_last_block():
    """
    Retrieve the last block in the blockchain.
    """
    return session.query(Block).order_by(Block.id.desc()).first()

# User Interface
@app.route('/mine', methods=['GET'])
def mine():
    """
    Mine a new block and add it to the blockchain.
    """
    last_block = get_last_block()
    last_proof = last_block.proof
    proof = proof_of_work(last_proof)

    # Reward the miner with a new coin
    create_transaction("0", "miner", 1)

    previous_hash = hashlib.sha256(str(last_block).encode()).hexdigest()
    block = create_block(last_block.index + 1, [], proof, previous_hash)

    response = {
        'message': "New Block Forged",
        'index': block.index,
        'transactions': block.transactions,
        'proof': block.proof,
        'previous_hash': block.previous_hash,
    }
    return jsonify(response), 200

@app.route('/transactions/new', methods=['POST'])
def new_transaction():
    """
    Add a new transaction to the next block.
    """
    values = request.get_json()
    required = ['sender', 'recipient', 'amount']
    if not all(k in values for k in required):
        return 'Missing values', 400

    # Create the transaction
    success = create_transaction(values['sender'], values['recipient'], values['amount'])
    if not success:
        return 'Insufficient funds', 400

    response = {'message': 'Transaction will be added to the next block'}
    return jsonify(response), 201

@app.route('/chain', methods=['GET'])
def full_chain():
    """
    Return the full blockchain.
    """
    blocks = session.query(Block).all()
    chain = [block.__dict__ for block in blocks]
    response = {
        'chain': chain,
        'length': len(chain),
    }
    return jsonify(response), 200

if __name__ == '__main__':
    Base.metadata.create_all(engine)
    app.run(host='0.0.0.0', port=5000)
